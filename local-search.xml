<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/08/02/C++%20STL/"/>
    <url>/2025/08/02/C++%20STL/</url>
    
    <content type="html"><![CDATA[<h1 id="C-STL"><a href="#C-STL" class="headerlink" title="C++ STL"></a><span style="background-color: #ffd40080">C++ STL</span></h1><p>本节介绍 <strong>STL</strong> 中 <strong>vector, queue, priority_queue, deque, set, multiset, map, bitset</strong> 八种算法竞赛中比较常用的容器。另外，我们也会介绍 <strong>algorithm</strong> 头文件中包含的部分函数。</p><hr><h1 id="include"><a href="#include" class="headerlink" title="#include&lt;vector&gt;"></a>#include&lt;vector&gt;</h1><p><strong>vector</strong> 可理解为变长数组，它的内部实现基于倍增思想。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">声明<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span>    头文件</span><br>vector&lt;<span class="hljs-type">int</span>&gt; a;      相当于一个长度动态变化的 <span class="hljs-type">int</span> 数组<br>vector&lt;<span class="hljs-type">int</span>&gt; b[<span class="hljs-number">9</span>]    相当于第一维长 <span class="hljs-number">9</span>，第二维长度动态变化的 <span class="hljs-type">int</span> 数组<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rec</span>&#123;...&#125;;<br>vector&lt;rec&gt; c;      自定义的结构体类型也可以保存在 vector 中<br></code></pre></td></tr></table></figure><h2 id="size-empty"><a href="#size-empty" class="headerlink" title="size&#x2F;empty"></a>size&#x2F;empty</h2><p><strong>size</strong> 函数返回 <strong>vector</strong> 的实际长度（包含的元素个数），<strong>empty</strong> 函数返回一个 <strong>bool</strong> 类型，表明 <strong>vector</strong> 是否为空。二者的时间复杂度都是 <strong>O(1)</strong>。</p><p>**所有的 STL 容器都支持这两个方法，含义也都相同，**之后我们就不再重复给出。</p><h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h2><p><strong>clear</strong> 函数把 <strong>vector</strong> 清空。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器就像 <strong>STL</strong> 容器的”指针“，可以用星号”*“操作符解除引用。</p><p>一个保存 <strong>int</strong> 的 <strong>vector</strong> 的迭代器声明方法为：</p><p><code>vector&lt;int&gt;::iterator it;</code><br><strong>vector</strong> 的迭代器是”随机访问迭代器“，可以把 <strong>vector</strong> 的迭代器与一个整数相加减，其行为和指针的移动类似。可以把 <strong>vector</strong> 的两个迭代器相减，其结果也和指针相减类似，得到两个迭代器对应下标之间的距离。</p><h2 id="begin-end"><a href="#begin-end" class="headerlink" title="begin&#x2F;end"></a>begin&#x2F;end</h2><p><strong>begin</strong> 函数返回指向 <strong>vector</strong> 中第一个元素的迭代器。例如 <strong>a</strong> 是一个非空的 <strong>vector</strong>，则 *<strong>a.begin()</strong> 与 <strong>a[0]</strong> 的作用相同。</p><p>所有的容器都可以视作一个“前闭后开”的结构，<strong>end</strong> 函数返回 <strong>vector</strong> 的尾部，即第 <strong>n</strong> 个元素再往后的“边界”。<strong>*a.end()</strong> 与 <strong>a[n]</strong> 都是越界访问，其中 <strong>n &#x3D; a.size()</strong></p><p>下面两份代码都遍历了 <strong>vector&lt;int&gt;a</strong>，并输出它的所有元素。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; a.size(); i++)<br>    cout &lt;&lt; a[i] &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (vector&lt;int&gt;::iterator <span class="hljs-keyword">it</span> = a.begin(); <span class="hljs-keyword">it</span> != a.<span class="hljs-keyword">end</span>(); <span class="hljs-keyword">it</span>++)<br>    cout &lt;&lt; a[i] &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="front-back"><a href="#front-back" class="headerlink" title="front&#x2F;back"></a>front&#x2F;back</h2><p><strong>front</strong> 函数返回 <strong>vector</strong> 的第一个元素，等价于 <strong>*a.begin()</strong> 和 <strong>a[0]</strong>。</p><p><strong>back</strong> 函数返回 <strong>vector</strong> 的最后一个元素，等价于 *<strong>–a.end()</strong> 和 <strong>a[a.size()-1]</strong>。</p><h2 id="push-back-pop-back"><a href="#push-back-pop-back" class="headerlink" title="push_back&#x2F;pop_back"></a>push_back&#x2F;pop_back</h2><p><strong>a.push_back(x)</strong> 把元素 <strong>x</strong> 插入到 <strong>vector a</strong> 的尾部。</p><p><strong>a.pop_back()</strong> 删除 <strong>vector a</strong> 的最后一个元素。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/07/18/%E7%AB%9E%E8%B5%9B%E7%9B%AE%E5%BD%95/"/>
    <url>/2025/07/18/%E7%AB%9E%E8%B5%9B%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="西南交通大学-2026-年推荐免试研究生-A-类学科竞赛目录（计算机科学与技术-软件工程-人工智能专业相关）"><a href="#西南交通大学-2026-年推荐免试研究生-A-类学科竞赛目录（计算机科学与技术-软件工程-人工智能专业相关）" class="headerlink" title="西南交通大学 2026 年推荐免试研究生 A 类学科竞赛目录（计算机科学与技术&#x2F;软件工程&#x2F;人工智能专业相关）"></a>西南交通大学 2026 年推荐免试研究生 A 类学科竞赛目录（计算机科学与技术&#x2F;软件工程&#x2F;人工智能专业相关）</h1><table><thead><tr><th>序号</th><th>竞赛名称</th><th>级别</th><th>举办时间</th></tr></thead><tbody><tr><td>4</td><td>ACM-ICPC 国际大学生程序设计竞赛</td><td>国家级、省级</td><td></td></tr><tr><td>6</td><td>全国大学生电子设计竞赛</td><td>国家级、省级</td><td></td></tr><tr><td>11</td><td>全国大学生交通运输科技大赛</td><td>国家级</td><td></td></tr><tr><td>12</td><td>全国大学生电子商务“创新、创意及创业”挑战赛</td><td>国家级、省级</td><td></td></tr><tr><td>14</td><td>中国大学生工程实践与创新能力大赛</td><td>国家级、省级</td><td></td></tr><tr><td>15</td><td>全国大学生物流设计大赛</td><td>国家级、省级</td><td></td></tr><tr><td>18</td><td>全国大学生机器人大赛（CURC）</td><td>国家级、省级</td><td></td></tr><tr><td>19</td><td>“西门子杯”中国智能制造挑战赛</td><td>国家级、省级</td><td></td></tr><tr><td>21</td><td>全国大学生先进成图技术与产品信息建模创新大赛</td><td>国家级、省级</td><td></td></tr><tr><td>22</td><td>中国大学生计算机设计大赛</td><td>国家级、省级</td><td></td></tr><tr><td>23</td><td>全国大学生市场调查与分析大赛</td><td>国家级、省级</td><td></td></tr><tr><td>24</td><td>中国大学生服务外包创新创业大赛</td><td>国家级、省级</td><td></td></tr><tr><td>26</td><td>中国高校计算机大赛-大数据挑战赛、团体程序设计天梯赛、移动应用创新赛、网络技术战赛、人工智能创意赛</td><td>国家级</td><td></td></tr><tr><td>27</td><td>中国机器人大赛暨RoboCup 机器人世界杯中国赛</td><td>国家级</td><td></td></tr><tr><td>28</td><td>全国大学生信息安全竞赛</td><td>国家级、省级</td><td></td></tr><tr><td>31</td><td>蓝桥杯全国软件和信息技术专业人才大赛</td><td>国家级、省级</td><td></td></tr><tr><td>33</td><td>“中国软件杯”大学生软件设计大赛</td><td>国家级</td><td></td></tr><tr><td>34</td><td>全国大学生光电设计竞赛</td><td>国家级、省级</td><td></td></tr><tr><td>35</td><td>未来设计师･全国高校数字艺术设计大赛</td><td>国家级、省级</td><td></td></tr><tr><td>36</td><td>中美青年创客大赛</td><td>国家级、省级</td><td></td></tr><tr><td>40</td><td>中国机器人及人工智能大赛</td><td>国家级、省级</td><td></td></tr><tr><td>45</td><td>“大唐杯”全国大学生新一代信息通信技术大赛</td><td>国家级</td><td></td></tr><tr><td>50</td><td>华为ICT 大赛</td><td>国家级、省级</td><td></td></tr><tr><td>51</td><td>全国大学生嵌入式芯片与系统设计竞赛</td><td>国家级、省级</td><td></td></tr><tr><td>52</td><td>中国高校智能机器人创意大赛</td><td>国家级、省级</td><td></td></tr></tbody></table><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><ol><li>西南交通大学为参加竞赛获奖的第一院校，方可认定加分。</li><li>参加竞赛获奖的团队，根据获奖顺序，按照相应加分标准申请加分。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>惶惶</title>
    <link href="/2025/07/17/2025-07-16-%E6%83%B6%E6%83%B6/"/>
    <url>/2025/07/17/2025-07-16-%E6%83%B6%E6%83%B6/</url>
    
    <content type="html"><![CDATA[<p>其实已经很久未能落笔，或许在某些瞬间很想记录下自己的想法，但碍于实在久疏书笔，错过了很多解读自己的时机。此时此刻我仍在参加大二的暑期实习，可能是与平时接触不多的人有了更多交流，接受到了更多新的见解，终于再次萌生记录一些的想法。</p><p>恍然间就已经结束了大学的两年生活，时间好像过得相当快，好像已经在开往终点结算了，我仍在惶恐，与自己的初心违背过一段时间，也离自己最初设定的目标越来越远。好像什么都抓不住，我的大学生活就即将要结束了。……当然，成长是有的，在两年的时间里认识了许许多多新的人，优秀的人，各种各样的人，学会了接纳各种各样的人，学会接纳别人也接纳自己，回顾起来都觉得惊奇，自己竟然已经变化了这么多，但始终惶惶，我一直没有成为理想中的自己。</p><p>可能确实在过去的两年里自以为是，终日庸庸碌碌，在焦虑里谈自己的幻想，再在焦虑中接受幻想的破灭，然后诞生出新的焦虑，我的心态好像一直有问题。我也在逐渐学习如何正确地、合理地看待一些事情，如何让自己在喧嚣中稳定下来。</p><p>其实这个博客很早就搭建起来了，但一直以来很少在上面真正记录什么，今天突然想要开始，就以这篇作为开篇吧，希望后续笔耕不辍。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/07/16/hello-world/"/>
    <url>/2025/07/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/01/18/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/01/18/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单行注释</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">多行注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 折行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Too \</span><br><span class="hljs-string">much&#x27;</span>)  <span class="hljs-comment"># Too much</span><br></code></pre></td></tr></table></figure><h3 id="2-进制"><a href="#2-进制" class="headerlink" title="2.进制"></a>2.进制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>  <span class="hljs-comment"># 十进制int(): 其他进制-&gt;十进制</span><br><span class="hljs-number">0b001</span>/<span class="hljs-number">0B001</span>  <span class="hljs-comment"># 二进制 bin(): 其他进制-&gt;二进制     </span><br><span class="hljs-number">0o001</span>/<span class="hljs-number">0O001</span>  <span class="hljs-comment"># 八进制 oct(): 其他进制-&gt;八进制</span><br><span class="hljs-number">0x001</span>/<span class="hljs-number">0X001</span>  <span class="hljs-comment"># 十六进制     hex(): 其他进制-&gt;十六进制</span><br><br><span class="hljs-comment"># 位运算</span><br><span class="hljs-comment"># &amp; 按位与</span><br><span class="hljs-comment"># | 按位或</span><br><span class="hljs-comment"># ~ 按位取反</span><br><span class="hljs-comment"># ^ 按位异或</span><br><span class="hljs-comment"># &lt;&lt; 左移</span><br><span class="hljs-comment"># &gt;&gt; 右移</span><br></code></pre></td></tr></table></figure><h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br>b = <span class="hljs-number">12.345</span><br>c = <span class="hljs-number">1</span> + <span class="hljs-number">2j</span><br>d = <span class="hljs-string">&#x27;Hello, world&#x27;</span><br>e = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))    <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;int(): int/str(dec)-&gt;int，可指定进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))    <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;float(): str-&gt;float</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(c))    <span class="hljs-comment"># &lt;class &#x27;complex&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(d))    <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;str(): ...-&gt;str，可指定编码; chr(): int-&gt;char; ord(): char-&gt;int</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(e))    <span class="hljs-comment"># &lt;class &#x27;bool&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-print"><a href="#4-print" class="headerlink" title="4.print"></a>4.print</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;a = &#x27;</span>))<br>b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;b = &#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d + %d = %d&#x27;</span> % (a, b, a + b))  <span class="hljs-comment"># a.value + b.value = a.value + b.value</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a + b =&#x27;</span>, a + b)  <span class="hljs-comment"># a + b = a.value + b.value</span><br><span class="hljs-comment"># print可输出多个值，多个值之间用&#x27;,&#x27;分隔，输出的内容之间默认以空格隔开</span><br></code></pre></td></tr></table></figure><h3 id="5-循环"><a href="#5-循环" class="headerlink" title="5.循环"></a>5.循环</h3><h5 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># range(start, end, step)  区间：[start, end)</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">101</span>, <span class="hljs-number">2</span>):  <span class="hljs-comment"># 若循环体中未用到i，可省略为&#x27;_&#x27;</span><br>    <span class="hljs-built_in">sum</span> += i<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Guess number</span><br><span class="hljs-keyword">import</span> random<br><br>ans = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    cnt += <span class="hljs-number">1</span><br>    num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Input n: &#x27;</span>))<br>    <span class="hljs-keyword">if</span> num &lt; ans:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Too small!&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> num &gt; ans:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Too big!&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Right!&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;You have guessed %d times&#x27;</span> % cnt)<br><br><span class="hljs-comment"># Print 9*9 multiplication table</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d*%d=%d&#x27;</span> % (i, j, i * j), end = <span class="hljs-string">&#x27;\t&#x27;</span>)  <span class="hljs-comment"># end指定结束符，默认为换行符</span><br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6.函数"></a>6.函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br><span class="hljs-comment"># 为参数设置默认值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">return</span> a + b<br><span class="hljs-comment"># 为部分参数设置默认值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b = <span class="hljs-number">0</span></span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a = <span class="hljs-number">0</span>, *, b</span>)<br><span class="hljs-comment"># 调用函数</span><br>add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) / add(b = <span class="hljs-number">1</span>, a = <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 可变参数列表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*a</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>        <span class="hljs-built_in">sum</span> += i<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><span class="hljs-comment"># 两个同名函数，由于Python没有函数重载的概念，后面的定义会覆盖之前的定义</span><br><span class="hljs-comment"># 模块中的函数</span><br><span class="hljs-keyword">import</span> module1 <span class="hljs-keyword">as</span> m1<br><span class="hljs-keyword">import</span> module2 <span class="hljs-keyword">as</span> m2<br><br>m1.fun()<br>m2.fun()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">若导入的模块除定义函数之外还有可执行代码，Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此。因此若我们在模块中编写了可执行代码，最好将这些可执行代码放在如下所示的条件中</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># __name__是Python中一个隐含的变量，它代表了模块的名字</span><br><span class="hljs-comment"># 只有被Python解释器直接执行的模块的名字才是__main__</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 条件语句</span><br>(x, y) = (y, x) <span class="hljs-keyword">if</span> x &gt; y <span class="hljs-keyword">else</span> (x, y)<br><span class="hljs-comment"># 作用域</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    <span class="hljs-keyword">global</span> a<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">可以用global关键字来指示函数中的变量来自于全局作用域，若全局作用域中没有该变量，则下面一行的代码就会定义该变量并将其置于全局作用域</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># nonlocal 嵌套作用域</span><br></code></pre></td></tr></table></figure><h3 id="7-字符串"><a href="#7-字符串" class="headerlink" title="7.字符串"></a>7.字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;hello, world!&#x27;</span><br>s2 = <span class="hljs-string">&quot;hello, world!&quot;</span><br><span class="hljs-comment"># 以三个双引号或单引号开头的字符串可以折行</span><br>s3 = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello, </span><br><span class="hljs-string">world!</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">在&#x27;\&#x27;后面还可以跟一个八进制或者十六进制数来表示字符，例如\141和\x61都表示小写字母a，前者是八进制的表示法，后者是十六进制的表示法。也可以在&#x27;\&#x27;后面跟Unicode字符编码来表示字符，例如\uxxxx</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 原始字符串</span><br><span class="hljs-string">r&#x27;...&#x27;</span><br><span class="hljs-comment"># 切片</span><br><span class="hljs-built_in">str</span>[start:end:step]  <span class="hljs-comment"># 区间：[start, end)</span><br>str1 = <span class="hljs-string">&#x27;hello, world!&#x27;</span><br><span class="hljs-comment"># 通过内置函数len计算字符串的长度</span><br><span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-comment"># 获得字符串首字母大写的拷贝</span><br><span class="hljs-built_in">str</span>.capitalize() <span class="hljs-comment"># Hello, world!</span><br><span class="hljs-comment"># 获得字符串每个单词首字母大写的拷贝</span><br><span class="hljs-built_in">str</span>.title() <span class="hljs-comment"># Hello, World!</span><br><span class="hljs-comment"># 获得字符串变大写后的拷贝</span><br><span class="hljs-built_in">str</span>.upper() <span class="hljs-comment"># HELLO, WORLD!</span><br><span class="hljs-comment"># 从字符串中查找子串所在位置</span><br><span class="hljs-built_in">str</span>.find(<span class="hljs-string">&#x27;or&#x27;</span>) <span class="hljs-comment"># 找不到时返回-1</span><br><span class="hljs-comment"># 与find类似但找不到子串时会引发异常</span><br><span class="hljs-built_in">str</span>.index(<span class="hljs-string">&#x27;or&#x27;</span>)<br><span class="hljs-comment"># 检查字符串是否以指定的字符串开头</span><br><span class="hljs-built_in">str</span>.startswith(<span class="hljs-string">&#x27;He&#x27;</span>)<br><span class="hljs-comment"># 检查字符串是否以指定的字符串结尾</span><br><span class="hljs-built_in">str</span>.endswith(<span class="hljs-string">&#x27;!&#x27;</span>)<br><span class="hljs-comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span><br><span class="hljs-built_in">str</span>.center(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br><span class="hljs-comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span><br><span class="hljs-built_in">str</span>.rjust(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-comment"># 检查字符串是否由数字构成</span><br><span class="hljs-built_in">str</span>.isdigit()<br><span class="hljs-comment"># 检查字符串是否以字母构成</span><br><span class="hljs-built_in">str</span>.isalpha()<br><span class="hljs-comment"># 检查字符串是否以数字和字母构成</span><br><span class="hljs-built_in">str</span>.isalnum()<br><span class="hljs-comment"># 获得字符串修剪左右两侧空格之后的拷贝</span><br><span class="hljs-built_in">str</span>.strip()<br><span class="hljs-comment"># 格式化字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, b, a * b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;a&#125;</span> * <span class="hljs-subst">&#123;b&#125;</span> = <span class="hljs-subst">&#123;a * b&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">100</span>]<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 3, 5, 7, 100]</span><br><span class="hljs-comment"># 乘号表示列表元素的重复</span><br>list2 = [<span class="hljs-string">&#x27;hello&#x27;</span>] * <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(list2) <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span><br><span class="hljs-comment"># 计算列表长度(元素个数)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list1)) <span class="hljs-comment"># 5</span><br><span class="hljs-comment"># 下标(索引)运算</span><br><span class="hljs-built_in">print</span>(list1[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 1</span><br><span class="hljs-comment"># 下标越界</span><br><span class="hljs-comment"># print(list1[5])  # IndexError: list index out of range</span><br><span class="hljs-built_in">print</span>(list1[-<span class="hljs-number">1</span>]) <span class="hljs-comment"># 100</span><br><span class="hljs-comment"># 修改元素值</span><br>list1[<span class="hljs-number">2</span>] = <span class="hljs-number">300</span><br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 3, 300, 7, 100]</span><br><span class="hljs-comment"># 通过循环用下标遍历列表元素</span><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(list1)):<br>    <span class="hljs-built_in">print</span>(list1[index])<br><span class="hljs-comment"># 通过for循环遍历列表元素</span><br><span class="hljs-keyword">for</span> elem <span class="hljs-keyword">in</span> list1:<br>    <span class="hljs-built_in">print</span>(elem)<br><span class="hljs-comment"># 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值</span><br><span class="hljs-keyword">for</span> index, elem <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1):<br>    <span class="hljs-built_in">print</span>(index, elem)<br>    <br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">100</span>]<br><span class="hljs-comment"># 添加元素</span><br>list1.append(<span class="hljs-number">200</span>)<br>list1.insert(<span class="hljs-number">1</span>, <span class="hljs-number">400</span>)<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 400, 3, 5, 7, 100, 200]</span><br><span class="hljs-comment"># 合并两个列表</span><br>list1.extend([<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>])<br>list1 += [<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>]<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span><br><span class="hljs-comment"># 通过内置函数len计算列表的长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list1)) <span class="hljs-comment"># 9</span><br><span class="hljs-comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span> <span class="hljs-keyword">in</span> list1:<br>list1.remove(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 400, 5, 7, 100, 200, 1000, 2000]</span><br><span class="hljs-comment"># 从指定的位置删除元素</span><br>list1.pop(<span class="hljs-number">0</span>)<br>list1.pop(<span class="hljs-built_in">len</span>(list1) - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [400, 5, 7, 100, 200, 1000]</span><br><span class="hljs-comment"># 清空列表元素</span><br>list1.clear()<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># []</span><br><br>fruits = [<span class="hljs-string">&#x27;grape&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;strawberry&#x27;</span>, <span class="hljs-string">&#x27;waxberry&#x27;</span>]<br>fruits += [<span class="hljs-string">&#x27;pitaya&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;mango&#x27;</span>]<br><span class="hljs-comment"># 列表切片</span><br>fruits2 = fruits[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span>(fruits2) <span class="hljs-comment"># apple strawberry waxberry</span><br><span class="hljs-comment"># 可以通过完整切片操作来复制列表</span><br>fruits2 = fruits[:]<br><span class="hljs-built_in">print</span>(fruits2) <span class="hljs-comment"># [&#x27;grape&#x27;, &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;, &#x27;pitaya&#x27;, &#x27;pear&#x27;, &#x27;mango&#x27;]</span><br><span class="hljs-comment"># 可以通过反向切片操作来获得倒转后的列表的拷贝</span><br>fruits2 = fruits[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(fruits2) <span class="hljs-comment"># [&#x27;mango&#x27;, &#x27;pear&#x27;, &#x27;pitaya&#x27;, &#x27;waxberry&#x27;, &#x27;strawberry&#x27;, &#x27;apple&#x27;, &#x27;grape&#x27;]</span><br><span class="hljs-comment"># 排序</span><br><span class="hljs-comment"># sorted函数返回列表排序后的副本，不修改传入的列表</span><br><span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>, reverse = <span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 通过key关键字参数指定根据字符串长度进行排序而不是默认的字典顺序</span><br><span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>, key = <span class="hljs-built_in">len</span>)<br><span class="hljs-comment"># 给列表对象发出排序消息，直接在列表对象上进行排序</span><br><span class="hljs-built_in">list</span>.sort(reverse = <span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 列表推导</span><br>f = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)] <span class="hljs-comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br>f = [x + y <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;AB&#x27;</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;12&#x27;</span>] <span class="hljs-comment"># [&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;B1&#x27;, &#x27;B2&#x27;]</span><br><span class="hljs-comment"># 用列表的生成表达式语法创建列表容器</span><br><span class="hljs-comment"># 用这种语法创建列表之后元素已经准备就绪,所以需要耗费较多的内存空间</span><br>f = [x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)]<br><span class="hljs-built_in">print</span>(sys.getsizeof(f)) <span class="hljs-comment"># 查看对象占用内存的字节数</span><br><span class="hljs-comment"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span><br><span class="hljs-comment"># 通过生成器可以获取到数据但它不占用额外的空间来存储数据</span><br><span class="hljs-comment"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span><br>f = (x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>))<br><span class="hljs-built_in">print</span>(sys.getsizeof(f))  <span class="hljs-comment"># 相比生成式生成器不占用存储数据的空间</span><br><span class="hljs-built_in">print</span>(f)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">200</span><br><span class="hljs-string">&lt;generator object &lt;genexpr&gt; at 0x0000014EFDC8B370&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> f:<br>    <span class="hljs-built_in">print</span>(val) <span class="hljs-comment"># 打印列表每个元素的值</span><br><span class="hljs-comment"># yield关键字可将一个普通函数改造成生成器函数</span><br><span class="hljs-comment"># 斐波那契</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a, b = b, a + b<br>        <span class="hljs-keyword">yield</span> a<br></code></pre></td></tr></table></figure><h3 id="9-元组"><a href="#9-元组" class="headerlink" title="9.元组"></a>9.元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义元组</span><br>t = (<span class="hljs-string">&#x27;yc&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;四川成都&#x27;</span>)<br><span class="hljs-built_in">print</span>(t) <span class="hljs-comment"># (&#x27;yc&#x27;, 20, True, &#x27;四川成都&#x27;)</span><br><span class="hljs-comment"># 获取元组中的元素</span><br><span class="hljs-built_in">print</span>(t[<span class="hljs-number">0</span>]) <span class="hljs-comment"># yc</span><br><span class="hljs-comment"># 遍历元组中的值</span><br><span class="hljs-keyword">for</span> member <span class="hljs-keyword">in</span> t:<br>    <span class="hljs-built_in">print</span>(member)<br><span class="hljs-comment"># 重新给元组赋值（错误）</span><br><span class="hljs-comment"># t[0] = &#x27;dcj&#x27;  # TypeError（元组中的值不可修改）</span><br><span class="hljs-comment"># 变量t重新引用新的元组，原来的元组将被垃圾回收</span><br>t = (<span class="hljs-string">&#x27;dcj&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;云南昆明&#x27;</span>)<br><span class="hljs-comment"># 将元组转换成列表</span><br>person = <span class="hljs-built_in">list</span>(t)<br><span class="hljs-comment"># 列表是可以修改它的元素的</span><br><span class="hljs-comment"># 将列表转换成元组</span><br>fruits_list = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]<br>fruits_tuple = <span class="hljs-built_in">tuple</span>(fruits_list)<br></code></pre></td></tr></table></figure><h3 id="10-集合"><a href="#10-集合" class="headerlink" title="10.集合"></a>10.集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建集合的字面量语法</span><br>set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(set1) <span class="hljs-comment"># &#123;1, 2, 3&#125;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(set1))<br><span class="hljs-comment"># 创建集合的构造器语法(面向对象部分会进行详细讲解)</span><br>set1 = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))<br>set1 = <span class="hljs-built_in">set</span>((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><span class="hljs-comment"># 创建集合的推导式语法(推导式也可以用于推导集合)</span><br>set1 = &#123;num <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>&#125;<br><span class="hljs-comment"># 添加元素</span><br>set1.add(<span class="hljs-number">5</span>) <span class="hljs-comment"># 仅能添加单个元素</span><br>set1.update([<span class="hljs-number">10</span>, <span class="hljs-number">11</span>])<br><span class="hljs-comment"># 删除元素</span><br>set1.discard(<span class="hljs-number">5</span>) <span class="hljs-comment"># 仅能删除单个元素</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">5</span> <span class="hljs-keyword">in</span> set1:<br>    set2.remove(<span class="hljs-number">5</span>)<br>set1.pop() <span class="hljs-comment"># 删除并返回首元素</span><br><br><span class="hljs-comment"># 集合的交集、并集、差集、对称差运算</span><br><span class="hljs-built_in">print</span>(set1 &amp; set2)<br><span class="hljs-comment"># print(set1.intersection(set2))</span><br><span class="hljs-built_in">print</span>(set1 | set2)<br><span class="hljs-comment"># print(set1.union(set2))</span><br><span class="hljs-built_in">print</span>(set1 - set2)<br><span class="hljs-comment"># print(set1.difference(set2))</span><br><span class="hljs-built_in">print</span>(set1 ^ set2)<br><span class="hljs-comment"># print(set1.symmetric_difference(set2))</span><br><br><span class="hljs-comment"># 判断子集和超集</span><br><span class="hljs-built_in">print</span>(set2 &lt;= set1)<br><span class="hljs-comment"># print(set2.issubset(set1))</span><br><span class="hljs-built_in">print</span>(set1 &gt;= set2)<br><span class="hljs-comment"># print(set1.issuperset(set2))</span><br></code></pre></td></tr></table></figure><h3 id="11-字典"><a href="#11-字典" class="headerlink" title="11.字典"></a>11.字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 创建字典的字面量语法</span><br>scores = &#123;<span class="hljs-string">&#x27;yc&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;李元芳&#x27;</span>: <span class="hljs-number">78</span>, <span class="hljs-string">&#x27;狄仁杰&#x27;</span>: <span class="hljs-number">82</span>&#125;<br><span class="hljs-built_in">print</span>(scores)<br><span class="hljs-comment"># 创建字典的构造器语法</span><br>items1 = <span class="hljs-built_in">dict</span>(one = <span class="hljs-number">1</span>, two = <span class="hljs-number">2</span>, three = <span class="hljs-number">3</span>) <span class="hljs-comment"># &#123;&#x27;one&#x27;: 1, &#x27;two&#x27;: 2, &#x27;three&#x27;: 3&#125;</span><br><span class="hljs-comment"># 通过zip函数将两个序列压成字典</span><br>items2 = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], <span class="hljs-string">&#x27;123&#x27;</span>)) <span class="hljs-comment"># &#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;, &#x27;c&#x27;: &#x27;3&#x27;&#125;</span><br><span class="hljs-comment"># 创建字典的推导式语法</span><br>items3 = &#123;num: num ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)&#125;<br><span class="hljs-comment"># &#123;1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81&#125;</span><br><span class="hljs-comment"># 通过键可以获取字典中对应的值</span><br><span class="hljs-built_in">print</span>(scores[<span class="hljs-string">&#x27;yc&#x27;</span>])<br><span class="hljs-comment"># 对字典中所有键值对进行遍历</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> scores: <span class="hljs-comment"># 产生键值列表</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span>: <span class="hljs-subst">&#123;scores[key]&#125;</span>&#x27;</span>)<br><span class="hljs-comment"># 更新字典中的元素</span><br>scores[<span class="hljs-string">&#x27;李元芳&#x27;</span>] = <span class="hljs-number">65</span><br>scores[<span class="hljs-string">&#x27;诸葛王朗&#x27;</span>] = <span class="hljs-number">70</span><br>scores.update(隋朝 = <span class="hljs-number">67</span>, 方启鹤 = <span class="hljs-number">85</span>)<br>scores.get(<span class="hljs-string">&#x27;武则天&#x27;</span>) <span class="hljs-comment"># None</span><br><span class="hljs-comment"># get方法也是通过键获取对应的值但是可以设置默认值</span><br>scores.get(<span class="hljs-string">&#x27;武则天&#x27;</span>, <span class="hljs-number">60</span>) <span class="hljs-comment"># 60（相当于添加元素）</span><br><span class="hljs-comment"># 删除字典中的元素</span><br><span class="hljs-built_in">print</span>(scores.popitem()) <span class="hljs-comment"># (&#x27;方启鹤&#x27;, 85) (尾元素)</span><br><span class="hljs-built_in">print</span>(scores.pop(<span class="hljs-string">&#x27;yc&#x27;</span>, <span class="hljs-number">100</span>)) <span class="hljs-comment"># 100无效，打印95</span><br><span class="hljs-comment"># 清空字典</span><br>scores.clear()<br></code></pre></td></tr></table></figure><h3 id="12-面向对象"><a href="#12-面向对象" class="headerlink" title="12.面向对象"></a>12.面向对象</h3><h5 id="类：静态特征（属性）、动态特征（行为）"><a href="#类：静态特征（属性）、动态特征（行为）" class="headerlink" title="类：静态特征（属性）、动态特征（行为）"></a>类：静态特征（属性）、动态特征（行为）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">在Python中可以用class关键字定义类，然后在类中通过函数来定义方法，这样就可以将对象的动态特征描述出来</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 写在类中的函数，我们通常称之为（对象的）方法，这些方法就是对象可以接收的消息</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-comment"># __init__是一个特殊方法，用于在创建对象时进行初始化操作</span><br>    <span class="hljs-comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self, course_name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在学习%s.&#x27;</span> % (<span class="hljs-variable language_">self</span>.name, course_name))<br><br>    <span class="hljs-comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">watch_movie</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.age &lt; <span class="hljs-number">18</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s只能观看蜡笔小新.&#x27;</span> % <span class="hljs-variable language_">self</span>.name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在观看不可名状之物.&#x27;</span> % <span class="hljs-variable language_">self</span>.name)<br>    <span class="hljs-comment"># 当我们定义好一个类之后，可以通过下面的方式来创建对象并给对象发消息</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 创建学生对象并指定姓名和年龄</span><br>    stu1 = Student(<span class="hljs-string">&#x27;yc&#x27;</span>, <span class="hljs-number">17</span>)<br>    <span class="hljs-comment"># 给对象发study消息</span><br>    stu1.study(<span class="hljs-string">&#x27;Python程序设计&#x27;</span>)<br>    <span class="hljs-comment"># 给对象发watch_movie消息</span><br>    stu1.watch_movie()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性或方法是私有的，在给属性命名时可以用两个下划线作为开头</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 在直接访问私有属性/方法时，会报错</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, foo</span>):<br>        <span class="hljs-variable language_">self</span>.__foo = foo<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bar</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.__foo)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__bar&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    test = Test(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    <span class="hljs-comment"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__bar&#x27;</span><br>    test.__bar()<br>    <span class="hljs-comment"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__foo&#x27;</span><br>    <span class="hljs-built_in">print</span>(test.__foo)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    test._Test__bar()<br>    <span class="hljs-built_in">print</span>(test._Test__foo)<br><span class="hljs-comment"># 在实际开发中，不建议将属性设置为私有的，这会导致子类无法访问</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">大多数Python程序员会遵循一种命名惯例，就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># @property装饰器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>._name = name<br>        <span class="hljs-variable language_">self</span>._age = age<br>    <span class="hljs-comment"># 访问器 - getter方法</span><br>    <br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._name<br>    <span class="hljs-comment"># 访问器 - getter方法</span><br>    <br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._age<br>    <span class="hljs-comment"># 修改器 - setter方法</span><br>    <br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self, age</span>):<br>        <span class="hljs-variable language_">self</span>._age = age<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._age &lt;= <span class="hljs-number">16</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩飞行棋.&#x27;</span> % <span class="hljs-variable language_">self</span>._name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩斗地主.&#x27;</span> % <span class="hljs-variable language_">self</span>._name)<br>            <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    person = Person(<span class="hljs-string">&#x27;yc&#x27;</span>, <span class="hljs-number">12</span>)<br>    person.play()<br>    person.age = <span class="hljs-number">20</span> <span class="hljs-comment"># 修改成功</span><br>    person.name = <span class="hljs-string">&#x27;李元芳&#x27;</span>  <span class="hljs-comment"># AttributeError: can&#x27;t set attribute</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Python允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># __slots__魔法</span><br><span class="hljs-comment"># 限定Person对象只能绑定_name, _age和_gender属性</span><br>__slots__ = (<span class="hljs-string">&#x27;_name&#x27;</span>, <span class="hljs-string">&#x27;_age&#x27;</span>, <span class="hljs-string">&#x27;_gender&#x27;</span>)<br><br><span class="hljs-comment"># 静态方法和类方法</span><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a, b, c</span>):<br>        <span class="hljs-variable language_">self</span>._a = a<br>        <span class="hljs-variable language_">self</span>._b = b<br>        <span class="hljs-variable language_">self</span>._c = c<br><br><span class="hljs-meta">    @staticmethod </span><span class="hljs-comment"># 静态方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">a, b, c</span>):<br>        <span class="hljs-keyword">return</span> a + b &gt; c <span class="hljs-keyword">and</span> b + c &gt; a <span class="hljs-keyword">and</span> a + c &gt; b<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perimeter</span>(<span class="hljs-params">self</span>): <span class="hljs-comment"># 对象方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._a + <span class="hljs-variable language_">self</span>._b + <span class="hljs-variable language_">self</span>._c<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">area</span>(<span class="hljs-params">self</span>):<br>        half = <span class="hljs-variable language_">self</span>.perimeter() / <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> sqrt(half * (half - <span class="hljs-variable language_">self</span>._a) *<br>                    (half - <span class="hljs-variable language_">self</span>._b) * (half - <span class="hljs-variable language_">self</span>._c))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    a, b, c = <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span><br>    <span class="hljs-comment"># 静态方法和类方法都是通过给类发消息来调用的</span><br>    <span class="hljs-keyword">if</span> Triangle.is_valid(a, b, c):<br>        t = Triangle(a, b, c)<br>        <span class="hljs-comment"># 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数</span><br>        t.area()<br>        Triangle.area(t)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无法构成三角形.&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">类方法的第一个参数约定名为cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象），通过这个参数我们可以获取和类相关的信息，并且可以创建出类的对象</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 类方法</span><br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, localtime, sleep<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, hour=<span class="hljs-number">0</span>, minute=<span class="hljs-number">0</span>, second=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-variable language_">self</span>._hour = hour<br>        <span class="hljs-variable language_">self</span>._minute = minute<br>        <span class="hljs-variable language_">self</span>._second = second<br><br><span class="hljs-meta">    @classmethod </span><span class="hljs-comment"># 类方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">now</span>(<span class="hljs-params">cls</span>):<br>        ctime = localtime(time())<br>        <span class="hljs-keyword">return</span> cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 通过类方法创建对象并获取系统时间</span><br>    clock = Clock.now()<br><br></code></pre></td></tr></table></figure><p><strong>类之间的关系</strong></p><p>简单来说，类之间的关系有三种：is-a、has-a和use-a</p><ul><li>is-a关系也叫继承或泛化，例如学生和人的关系、手机和电子产品的关系都属于继承关系</li><li>has-a关系通常称之为关联，例如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是整体和部分的关联，那么称之为聚合关系；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，称之为合成关系</li><li>use-a关系通常称之为依赖，比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 继承和多态</span><br><span class="hljs-comment"># 父类/超类/基类，子类/派生类/衍生类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>              ^^^^^^<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, grade</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        ^^^^^<br>        <span class="hljs-variable language_">self</span>._grade = grade<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态（poly-morphism）</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-built_in">object</span>, metaclass=ABCMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;宠物&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, nickname</span>):<br>        <span class="hljs-variable language_">self</span>._nickname = nickname<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_voice</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;发出声音&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Pet</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;狗&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_voice</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: woef...&#x27;</span> % <span class="hljs-variable language_">self</span>._nickname)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">在上面的代码中，将Pet类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是可以通过abc模块的ABCMeta元类和abstractmethod包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="指数型枚举"><a href="#指数型枚举" class="headerlink" title="指数型枚举"></a>指数型枚举</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x == n + <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> chosen:<br>            <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-built_in">print</span>()<br>        <span class="hljs-keyword">return</span><br>    calc(x + <span class="hljs-number">1</span>)<br>    chosen.append(x)<br>    calc(x + <span class="hljs-number">1</span>)<br>    chosen.pop()<br><br>calc(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="排列型枚举"><a href="#排列型枚举" class="headerlink" title="排列型枚举"></a>排列型枚举</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">k</span>):<br>    <span class="hljs-keyword">if</span> k == n + <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> order:<br>            <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-built_in">print</span>()<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> chosen:<br>            order.append(i)<br>            chosen.append(i)<br>            calc(k + <span class="hljs-number">1</span>)<br>            chosen.pop()<br>            order.pop()<br>calc(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">S<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = S<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span> + S<span class="hljs-comment">[i]</span><span class="hljs-comment">[j-1]</span> - S<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-1]</span> + A<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span><br></code></pre></td></tr></table></figure><h3 id="快速幂算法"><a href="#快速幂算法" class="headerlink" title="快速幂算法"></a>快速幂算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quickpow</span>(<span class="hljs-params">a, n, mod</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    快速幂算法，计算 a 的 n 次幂对 mod 取模的结果</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    ans = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> n:<br>        <span class="hljs-keyword">if</span> n &amp; <span class="hljs-number">1</span>:<br>            ans = ans * a % mod<br>        a = a * a % mod<br>        n &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.children = &#123;&#125;  <span class="hljs-comment"># 存储子节点</span><br>        <span class="hljs-variable language_">self</span>.is_end_of_word = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 是否是单词的结尾</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.root = TrieNode()  <span class="hljs-comment"># 根节点</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, word: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;插入一个单词到字典树中&quot;&quot;&quot;</span><br>        node = <span class="hljs-variable language_">self</span>.root<br>        <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> word:<br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> node.children:<br>                node.children[char] = TrieNode()<br>            node = node.children[char]<br>        node.is_end_of_word = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, word: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;查找一个单词是否存在于字典树中&quot;&quot;&quot;</span><br>        node = <span class="hljs-variable language_">self</span>.root<br>        <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> word:<br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> node.children:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            node = node.children[char]<br>        <span class="hljs-keyword">return</span> node.is_end_of_word<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">starts_with</span>(<span class="hljs-params">self, prefix: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;查找字典树中是否有以给定前缀开头的单词&quot;&quot;&quot;</span><br>        node = <span class="hljs-variable language_">self</span>.root<br>        <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> prefix:<br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> node.children:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            node = node.children[char]<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, word: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;从字典树中删除一个单词&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">_delete</span>(<span class="hljs-params">node, word, index</span>):<br>            <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(word):<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node.is_end_of_word:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                node.is_end_of_word = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(node.children) == <span class="hljs-number">0</span><br>            char = word[index]<br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> node.children:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            should_delete_current_node = _delete(node.children[char], word, index + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> should_delete_current_node:<br>                <span class="hljs-keyword">del</span> node.children[char]<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(node.children) == <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        _delete(<span class="hljs-variable language_">self</span>.root, word, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="质数筛"><a href="#质数筛" class="headerlink" title="质数筛"></a>质数筛</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">primes</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-comment"># 创建一个布尔列表，初始时假设所有数字都是素数</span><br>    is_prime = [<span class="hljs-literal">True</span>] * (n + <span class="hljs-number">1</span>)<br>    is_prime[<span class="hljs-number">0</span>] = is_prime[<span class="hljs-number">1</span>] = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 0 和 1 不是素数</span><br><br>    <span class="hljs-comment"># 从 2 开始筛选</span><br>    p = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> p * p &lt;= n:<br>        <span class="hljs-comment"># 如果 is_prime[p] 是素数，则筛掉它的所有倍数</span><br>        <span class="hljs-keyword">if</span> is_prime[p]:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p * p, n + <span class="hljs-number">1</span>, p):<br>                is_prime[i] = <span class="hljs-literal">False</span><br>        p += <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 收集所有素数</span><br>    primes = [p <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> is_prime[p]]<br>    <span class="hljs-keyword">return</span> primes<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown速查笔记</title>
    <link href="/2024/08/07/md%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/08/07/md%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"># A first-level heading<br>## A second-level heading<br>### A third-level heading<br>...<br>###### A sixth-level heading<br></code></pre></td></tr></table></figure><p>使用两个或多个标题时，GitHub 会自动生成一个目录，可以通过单击文件标题中的  来访问该目录。 每个标题都列在目录中，可以单击某个标题导航到所选部分。</p><p><img src="https://docs.github.com/assets/cb-82863/mw-1440/images/help/repository/headings-toc.webp"></p><h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><table><thead><tr><th>Style</th><th>符号</th><th>快捷键</th><th>示例</th></tr></thead><tbody><tr><td>加粗</td><td><code>** **</code> 或 <code>__ __</code></td><td><code>ctrl+B</code></td><td><strong>加粗</strong></td></tr><tr><td>斜体</td><td><code>* *</code> 或 <code>_ _</code></td><td><code>ctrl+I</code></td><td><em>斜体</em></td></tr><tr><td>删除线</td><td><code>~~ ~~</code></td><td></td><td><del>删除线</del></td></tr><tr><td>粗体和嵌入的斜体</td><td><code>** **</code> 和 <code>_ _</code></td><td></td><td><strong>This text is <em>extremely</em> important</strong></td></tr><tr><td>全部粗体和斜体</td><td><code>*** ***</code></td><td></td><td><em><strong>All this text is important</strong></em></td></tr><tr><td>下标</td><td><code>&lt;sub&gt;&lt;/sub&gt;</code></td><td></td><td>This is a <sub>subscript</sub> text</td></tr><tr><td>上标</td><td><code>&lt;sup&gt; &lt;/sup&gt;</code></td><td></td><td>This is a <sup>superscript</sup> text</td></tr></tbody></table><h2 id="引用文本"><a href="#引用文本" class="headerlink" title="引用文本"></a>引用文本</h2><p>可以使用 &gt; 来引用文本。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&gt; Text <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> a <span class="hljs-literal">quote</span><br></code></pre></td></tr></table></figure><blockquote><p>引用文本缩进，具有不同的类型颜色。</p></blockquote><h2 id="引用代码"><a href="#引用代码" class="headerlink" title="引用代码"></a>引用代码</h2><p>使用单反引号可标注句子中的代码或命令。</p><blockquote><p>反引号中的文本不会被格式化。</p></blockquote><p>你也可以按 <code>Ctrl+E</code> (Windows&#x2F;Linux) 键盘快捷方式将代码块的反引号插入到 Markdown 一行中。</p><p>要将代码或文本格式化为各自的不同块，请使用三反引号。</p><h3 id="隔离代码块"><a href="#隔离代码块" class="headerlink" title="隔离代码块"></a>隔离代码块</h3><blockquote><p>要在列表中保留格式，请确保将非围栏代码块缩进八个空格。<br>要在围栏代码块中显示三重倒引号，请将其包在四个倒引号内。</p></blockquote><h3 id="语法突出显示"><a href="#语法突出显示" class="headerlink" title="语法突出显示"></a>语法突出显示</h3><p>您可以添加可选的语言标识符，以在围栏代码块中启用语法突显。</p><p>语法突出显示功能会更改源代码的颜色和样式，使其更易于阅读。</p><p>例如，要语法突显 Ruby 代码：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">```ruby<br>require &#x27;redcarpet&#x27;<br>markdown = Redcarpet.<span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>puts markdown.to_html<br>```<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;redcarpet&#x27;</span><br>markdown = <span class="hljs-title class_">Redcarpet</span>.new(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>puts markdown.to_html<br></code></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>通过将链接文本用方括号 <code>[ ]</code> 括起来，然后将 URL 用括号 <code>( )</code> 括起来，可创建内联链接。</p><p><code>This site was built using [GitHub Pages](https://pages.github.com/).</code></p><p>This site was built using <a href="https://pages.github.com/">GitHub Pages</a>.</p><h3 id="章节链接"><a href="#章节链接" class="headerlink" title="章节链接"></a>章节链接</h3><p>你可以直接链接到渲染文件中的某个部分，方法是将鼠标悬停在该部分标题上以显示 。<br><img src="https://docs.github.com/assets/cb-55933/mw-1440/images/help/repository/readme-links.webp"><br>链接文本应位于一行上。 下面的示例将不起作用。</p><h3 id="相对链接"><a href="#相对链接" class="headerlink" title="相对链接"></a>相对链接</h3><p>……</p><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>通过添加 <code>!</code> 并将 alt 文本用 <code>[ ]</code> 括起来，可显示图像。 替换文字是等效于图像中信息的短文本。 然后将图像的链接用括号 <code>()</code> 括起来。</p><h3 id="指定图像显示的主题"><a href="#指定图像显示的主题" class="headerlink" title="指定图像显示的主题"></a>指定图像显示的主题</h3><p>你可以通过结合使用 HTML <code>&lt;picture&gt;</code> 元素和 <code>prefers-color-scheme</code> 媒体功能来指定在 Markdown 中显示图像的主题。 我们区分浅色和深色模式，因此有两个选项可用。 可以使用这些选项来显示针对深色或浅色背景进行了优化的图像。 这对于透明的 PNG 图像特别有用。</p><blockquote><p>例如，以下代码显示浅色主题的太阳图像和深色主题的月亮：</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;picture&gt;<br>  &lt;source media<span class="hljs-operator">=</span><span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span> srcset<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://user-images.githubusercontent.com/25423296/163456776-7f95b81a-f1ed-45f7-b7ab-8fa810d529fa.png&quot;</span>&gt;<br>  &lt;source media<span class="hljs-operator">=</span><span class="hljs-string">&quot;(prefers-color-scheme: light)&quot;</span> srcset<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png&quot;</span>&gt;<br>  &lt;img alt<span class="hljs-operator">=</span><span class="hljs-string">&quot;Shows an illustrated sun in light mode and a moon with stars in dark mode.&quot;</span> src<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png&quot;</span>&gt;<br>&lt;/picture&gt;<br></code></pre></td></tr></table></figure><picture>  <source media="(prefers-color-scheme: dark)" srcset="https://user-images.githubusercontent.com/25423296/163456776-7f95b81a-f1ed-45f7-b7ab-8fa810d529fa.png">  <source media="(prefers-color-scheme: light)" srcset="https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png">  <img alt="Shows an illustrated sun in light mode and a moon with stars in dark mode." src="https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png"></picture><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>可通过在一行或多行文本前面加上 <code>-</code>、<code>*</code> 或 <code>+</code> 来创建一个无序列表。</p><p>要对列表排序，请在每行前面添加一个编号。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> James Madison<br><span class="hljs-bullet">2.</span> James Monroe<br><span class="hljs-bullet">3.</span> John Quincy Adams<br></code></pre></td></tr></table></figure><h3 id="嵌套链表"><a href="#嵌套链表" class="headerlink" title="嵌套链表"></a>嵌套链表</h3><p>通过在一个列表项下面缩进一个或多个其他列表项，可创建嵌套列表。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1.</span> First <span class="hljs-built_in">list</span> <span class="hljs-built_in">item</span><br>   - First nested <span class="hljs-built_in">list</span> <span class="hljs-built_in">item</span><br>     - Second nested <span class="hljs-built_in">list</span> <span class="hljs-built_in">item</span><br></code></pre></td></tr></table></figure><ol><li>First list item<ul><li>First nested list item<ul><li>Second nested list item</li></ul></li></ul></li></ol><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>若要创建任务列表，请在列表项前加连字符和空格，后接 <code>[ ]</code>。 要将任务标记为完成，请使用 <code>[x]</code>。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[x]</span> <span class="hljs-selector-id">#739</span><br><span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[ ]</span> <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//github.com/octo-org/octo-repo/issues/740</span><br><span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[ ]</span> <span class="hljs-selector-tag">Add</span> <span class="hljs-selector-tag">delight</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">experience</span> <span class="hljs-keyword">when</span> all tasks are <span class="hljs-attribute">complete </span>:<span class="hljs-attribute">tada</span>:<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> #739</li><li><input disabled="" type="checkbox"> <a href="https://github.com/octo-org/octo-repo/issues/740">https://github.com/octo-org/octo-repo/issues/740</a></li><li><input disabled="" type="checkbox"> Add delight to the experience when all tasks are complete :tada:<br>如果任务列表项说明以括号开头，则需要使用 \ 进行转义：</li></ul><h2 id="提及人员和团队"><a href="#提及人员和团队" class="headerlink" title="提及人员和团队"></a>提及人员和团队</h2><p>可以在 GitHub 上提及人员或团队，方法是键入 @ 加上其用户名或团队名称。 这将触发通知并提请他们注意对话。 如果您在编辑的评论中提及某人的用户名或团队名称，该用户也会收到通知。</p><h2 id="使用表情符号"><a href="#使用表情符号" class="headerlink" title="使用表情符号"></a>使用表情符号</h2><p>你可以通过键入 <code>:EMOJICODE</code> :（冒号后跟表情符号的名称）将表情符号添加到写作中。<br>键入 : 将显示建议的表情符号列表。 列表将在你键入时进行筛选，因此一旦找到所需表情符号，请按 Tab 或 Enter 键以填写突出显示的结果 。</p><blockquote><p>有关可用表情符号和代码的完整列表，请参阅 Emoji-Cheat-Sheet。</p></blockquote><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>通过在文本行之间留一个空白行，可创建新段落。</p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>您可以使用此括号语法为您的内容添加脚注：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">Here</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">simple</span> <span class="hljs-selector-tag">footnote</span><span class="hljs-selector-attr">[^1]</span>.<br><br><span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">footnote</span> <span class="hljs-selector-tag">can</span> <span class="hljs-selector-tag">also</span> <span class="hljs-selector-tag">have</span> <span class="hljs-selector-tag">multiple</span> <span class="hljs-selector-tag">lines</span><span class="hljs-selector-attr">[^2]</span>.<br><br><span class="hljs-selector-attr">[^1]</span>: <span class="hljs-selector-tag">My</span> <span class="hljs-selector-tag">reference</span>.<br><span class="hljs-selector-attr">[^2]</span>: <span class="hljs-selector-tag">To</span> <span class="hljs-selector-tag">add</span> <span class="hljs-selector-tag">line</span> <span class="hljs-selector-tag">breaks</span> <span class="hljs-selector-tag">within</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">footnote</span>, <span class="hljs-selector-tag">prefix</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">lines</span> <span class="hljs-selector-tag">with</span> <span class="hljs-number">2</span> <span class="hljs-selector-tag">spaces</span>.<br>  <span class="hljs-selector-tag">This</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">second</span> <span class="hljs-selector-tag">line</span>.<br></code></pre></td></tr></table></figure><p>Here is a simple footnote<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="My reference.">[1]</span></a></sup>.</p><p>A footnote can also have multiple lines<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="To add line breaks within a footnote, prefix new lines with 2 spaces.  This is a second line.">[2]</span></a></sup>.</p><p>Wiki 不支持脚注。</p><h2 id="警报"><a href="#警报" class="headerlink" title="警报"></a>警报</h2><p>警报是基于块引用语法的 Markdown 扩展，可用于强调关键信息。 在 GitHub 上，它们以独特的颜色和图标显示，以指示内容的显著性。</p><blockquote><p>只有在对用户成功至关重要时才使用警报，并将每篇文章的警报限制在一到两个，以防止读者负担过重。 此外，应避免连续发出警报。 警报无法嵌套在其他元素中。</p></blockquote><p>要添加警报，请使用指定警报类型的特殊块引用行，然后在标准块引用中添加警报信息。 可以使用以下五种类型的警报：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">NOTE</span>]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Useful</span> information that users should know, even when skimming content.</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">TIP</span>]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Helpful</span> advice <span class="hljs-keyword">for</span> doing things better or more easily.</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">IMPORTANT</span>]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Key</span> information users need to know to achieve their goal.</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">WARNING</span>]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Urgent</span> info that needs immediate user attention to avoid problems.</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">CAUTION</span>]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Advises</span> about risks or negative outcomes <span class="hljs-keyword">of</span> certain actions.</span><br></code></pre></td></tr></table></figure><blockquote><p>Useful information that users should know, even when skimming content.</p></blockquote><blockquote><p>[!TIP]<br>Helpful advice for doing things better or more easily.</p></blockquote><blockquote><p>[!IMPORTANT]<br>Key information users need to know to achieve their goal.</p></blockquote><blockquote><p>[!WARNING]<br>Urgent info that needs immediate user attention to avoid problems.</p></blockquote><blockquote><p>[!CAUTION]<br>Advises about risks or negative outcomes of certain actions.</p></blockquote><h2 id="隐藏有评论的内容"><a href="#隐藏有评论的内容" class="headerlink" title="隐藏有评论的内容"></a>隐藏有评论的内容</h2><p>您可以通过在 HTML 评论中加入内容来指示 GitHub 隐藏渲染的 Markdown 中的内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- This content will not appear in the rendered Markdown --&gt;</span><br></code></pre></td></tr></table></figure><!-- This content will not appear in the rendered Markdown --><h2 id="忽略-Markdown-格式"><a href="#忽略-Markdown-格式" class="headerlink" title="忽略 Markdown 格式"></a>忽略 Markdown 格式</h2><p>通过在 Markdown 字符前面输入 \，可指示 GitHub 忽略 Markdown 格式（或对其进行转义）。</p><h2 id="使用表格组织信息"><a href="#使用表格组织信息" class="headerlink" title="使用表格组织信息"></a>使用表格组织信息</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>可以使用竖线 | 和连字符 - 创建表。 连字符用于创建每列的标题，而竖线用于分隔每列。 必须在表格前包含空白链接，以便其正确呈现。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> First Header  </span>|<span class="hljs-string"> Second Header </span>|<br>|<span class="hljs-string"> ------------- </span>|<span class="hljs-string"> ------------- </span>|<br>|<span class="hljs-string"> Content Cell  </span>|<span class="hljs-string"> Content Cell  </span>|<br>|<span class="hljs-string"> Content Cell  </span>|<span class="hljs-string"> Content Cell  </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>表格末尾的竖线可选。</td><td></td></tr></tbody></table><p>单元格的宽度可以不同，无需在列内准确对齐。 标题行的第一列中必须至少有三个横线。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> Command </span>|<span class="hljs-string"> Description </span>|<br>|<span class="hljs-string"> --- </span>|<span class="hljs-string"> --- </span>|<br>|<span class="hljs-string"> git status </span>|<span class="hljs-string"> List all new or modified files </span>|<br>|<span class="hljs-string"> git diff </span>|<span class="hljs-string"> Show file differences that haven&#x27;t been staged </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td>git status</td><td>List all new or modified files</td></tr><tr><td>git diff</td><td>Show file differences that haven’t been staged</td></tr></tbody></table><h3 id="格式化表格中的内容"><a href="#格式化表格中的内容" class="headerlink" title="格式化表格中的内容"></a>格式化表格中的内容</h3><p>可以在表格中使用格式，例如链接、内联代码块和文本样式：</p><p>可以通过在标题行中连字符的左侧、右侧或两侧添加*<strong>冒号</strong> :，来靠左、靠右或居中对齐列中的文本。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> Left-aligned </span>|<span class="hljs-string"> Center-aligned </span>|<span class="hljs-string"> Right-aligned </span>|<br>|<span class="hljs-string"> :---         </span>|<span class="hljs-string">     :---:      </span>|<span class="hljs-string">          ---: </span>|<br>|<span class="hljs-string"> git status   </span>|<span class="hljs-string"> git status     </span>|<span class="hljs-string"> git status    </span>|<br>|<span class="hljs-string"> git diff     </span>|<span class="hljs-string"> git diff       </span>|<span class="hljs-string"> git diff      </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">Left-aligned</th><th align="center">Center-aligned</th><th align="right">Right-aligned</th></tr></thead><tbody><tr><td align="left">git status</td><td align="center">git status</td><td align="right">git status</td></tr><tr><td align="left">git diff</td><td align="center">git diff</td><td align="right">git diff</td></tr></tbody></table><h2 id="使用折叠部分组织信息"><a href="#使用折叠部分组织信息" class="headerlink" title="使用折叠部分组织信息"></a>使用折叠部分组织信息</h2><h3 id="创建折叠部分"><a href="#创建折叠部分" class="headerlink" title="创建折叠部分"></a>创建折叠部分</h3><p>可以通过创建读者可以选择展开的折叠部分来暂时隐藏 Markdown 的分区。</p><p><code>&lt;details&gt;</code> 块中的任何 Markdown 都将被折叠，直到读者单击  展开详细信息。</p><p>在 <code>&lt;details&gt;</code> 块中，使用 <code>&lt;summary&gt;</code> 标记让读者知道里面的内容。 标签显示在  的右侧。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">details</span>&gt;<br><br>&lt;<span class="hljs-selector-tag">summary</span>&gt;Tips for collapsed sections&lt;/<span class="hljs-selector-tag">summary</span>&gt;<br><br>### You can add <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">header</span><br><br>You can add <span class="hljs-selector-tag">text</span> within <span class="hljs-selector-tag">a</span> collapsed <span class="hljs-selector-tag">section</span>. <br><br>You can add an <span class="hljs-selector-tag">image</span> or <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">code</span> block, too.<br><br>```ruby<br>   puts &quot;Hello World&quot;<br></code></pre></td></tr></table></figure></details><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">details</span>&gt;<br><br>&lt;<span class="hljs-selector-tag">summary</span>&gt;Tips for collapsed sections&lt;/<span class="hljs-selector-tag">summary</span>&gt;<br><br>### You can add <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">header</span><br><br>You can add <span class="hljs-selector-tag">text</span> within <span class="hljs-selector-tag">a</span> collapsed <span class="hljs-selector-tag">section</span>. <br><br>You can add an <span class="hljs-selector-tag">image</span> or <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">code</span> block, too.<br><br>```ruby<br>   puts &quot;Hello World&quot;<br></code></pre></td></tr></table></figure></details><h2 id="创建关系图"><a href="#创建关系图" class="headerlink" title="创建关系图"></a>创建关系图</h2><h3 id="关于创建关系图"><a href="#关于创建关系图" class="headerlink" title="关于创建关系图"></a>关于创建关系图</h3><p>可以使用以下三种不同的语法在 Markdown 中创建关系图：mermaid、geoJSON 和 topoJSON、ASCII STL。 关系图可在以下项中呈现：GitHub Issues、GitHub Discussions、拉取请求、Wiki 和 Markdown 文件。</p><h3 id="创建-Mermaid-关系图"><a href="#创建-Mermaid-关系图" class="headerlink" title="创建 Mermaid 关系图"></a>创建 Mermaid 关系图</h3><p>Mermaid 是一款受 Markdown 启发的工具，可将文本呈现为关系图。 例如，Mermaid 可以呈现流程图、序列图、饼图等。 </p><p>例如，可以通过指定值和箭头来创建流程图。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">Here is <span class="hljs-selector-tag">a</span> simple <span class="hljs-attribute">flow</span> chart:<br><br>```mermaid<br>graph TD;<br>    <span class="hljs-selector-tag">A</span>--&gt;<span class="hljs-selector-tag">B</span>;<br>    <span class="hljs-selector-tag">A</span>--&gt;C;<br>    <span class="hljs-selector-tag">B</span>--&gt;D;<br>    C--&gt;D;<br>```<br></code></pre></td></tr></table></figure><h2 id="编写数学表达式"><a href="#编写数学表达式" class="headerlink" title="编写数学表达式"></a>编写数学表达式</h2><p>……<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>My reference. ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>To add line breaks within a footnote, prefix new lines with 2 spaces.  This is a second line.<br><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    <categories>
      
      <category>语言学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
